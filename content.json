{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"setTimeout","slug":"setTimeout","date":"2019-03-07T13:12:21.000Z","updated":"2019-03-07T13:13:39.287Z","comments":true,"path":"2019/03/07/setTimeout/","link":"","permalink":"http://yoursite.com/2019/03/07/setTimeout/","excerpt":"","text":"延时器的妙用标签（空格分隔）： 代码部分 1234567891011121314151617181920212223242526272829&lt;script&gt; var timer = null; $(&apos;.li-item&apos;).mouseenter(function()&#123; var newThis = $(this); //下面的延时器不能得到当前的li，因此我们要先把它存起来 clearTimeout(timer); timer = setTimeout(function()&#123; //启用延时器的原因我们鼠标从进入box到确定要看哪一个需要时间，不能把鼠标扫过的li都执行一遍，所以我们才要kai // $(this).siblings().stop(true,true); console.log(222222) newThis.animate(&#123; width: &apos;600px&apos; &#125;); newThis.siblings().animate(&#123; width: &apos;100px&apos; &#125;); &#125;,1000); &#125;); //此处应该不是li标签了，因为每次你移动到其他li标签，他最终还是li标签呀，所以应该是当ul父类获取不到鼠标的时候才执行时间 $(&apos;.box&apos;).mouseleave(function()&#123; console.log(&apos;-------------&apos;) clearTimeout(timer); //这里还要把鼠标移出box时未完成的延时器清除掉 $(&apos;.li-item&apos;).animate(&#123; width: &apos;200px&apos; &#125;); &#125;); &lt;/script&gt;","categories":[],"tags":[]},{"title":"jquery","slug":"star-1","date":"2019-02-25T12:24:29.000Z","updated":"2019-03-09T06:56:38.135Z","comments":true,"path":"2019/02/25/star-1/","link":"","permalink":"http://yoursite.com/2019/02/25/star-1/","excerpt":"","text":"点我 Javascipt跟jQuery的区别： Javascript是一门编程语言，我们用它来编写客户端浏览器脚本。 jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发语法 $(&#39;#btn&#39;)//以$开头的就代表jq。选择了一个id为btn的节点，此为JQ对象.Jq对象如何转换为DOM对象。 var spanEl = $(&#39;span&#39;)[0] //这样把JQ对象转换为DOM对象。dom对象转换为Jq对象，可以使用$()方式直接转换。 var d1E = document.getElementsByClassName(&#39;d1&#39;)[0]; $(d1E).css(&#39;color&#39;,&#39;red&#39;)层级选择器 $(&#39;div&gt;.xxx&#39;)//直接子类选择器。 $(&#39;div span&#39;)//子类选择器。 $(&#39;div~div&#39;)//div后面的所有兄弟节点 $(&#39;div~div&#39;)//div后面的所有兄弟节点常用的筛选选择器 选择第一个$(&#39;div:first&#39;) 选择最后一个$(&#39;div:last&#39;) 选择某一个$(&#39;div:eq(index)&#39;) 选择偶数的元素$(&#39;div:even&#39;)从0算 选择奇数的元素$(&#39;div:odd&#39;)从0算 取反$(&#39;div:not(:odd)&#39;) jq属性与样式 获取css$(&#39;.d1&#39;).css(&#39;background-color&#39;);$(&#39;.d1&#39;).css([&#39;color&#39;,&#39;size&#39;]) 设置CSS$(&#39;div&#39;).css(&#39;color&#39;,&#39;red&#39;) 获取属性的值$(input).attr(&#39;value&#39;) 设置属性的值$(input).attr(&#39;value&#39;,&#39;xxx&#39;) 你甚至都能在后面写一个函数 $(&#39;input&#39;).attr(&#39;value&#39;,function(){ return &#39;xxx&#39;}) 设置多个属性的值 $(&#39;input&#39;).attr({type:&#39;number&#39;, value:&#39;23333&#39;}) 有删除就有移除，移除某一个属性removeAttr() $(&#39;input&#39;).removeAttr(&#39;value&#39;) 添加类名$(div).addClass(&#39;new&#39;) 删除类名$(div).removeClass(&#39;new&#39;) 检测类名$(&#39;.box&#39;).hasClass(&#39;box&#39;)","categories":[],"tags":[]},{"title":"star","slug":"star","date":"2019-02-18T02:50:03.000Z","updated":"2019-03-09T06:59:49.249Z","comments":true,"path":"2019/02/18/star/","link":"","permalink":"http://yoursite.com/2019/02/18/star/","excerpt":"","text":"这是我刚写的 点我 点我","categories":[],"tags":[]},{"title":"正则表达式","slug":"zcbas","date":"2019-02-18T02:50:03.000Z","updated":"2019-04-15T08:32:26.593Z","comments":true,"path":"2019/02/18/zcbas/","link":"","permalink":"http://yoursite.com/2019/02/18/zcbas/","excerpt":"","text":"1.正则表达式声明方式123456789 var qqReg = /^[1-9][0-9]&#123;4,10&#125;$/; //声明方式$(&apos;.btn&apos;).click(function () &#123; // qqReg.test() 用正则验证字符串 是否符合 if(qqReg.test($(&apos;.qq&apos;).val()))&#123; $(&apos;.msg&apos;).text(&apos;这是一个正确的qq号&apos;); &#125;else&#123; $(&apos;.msg&apos;).text(&apos;qq号有问题&apos;); &#125; &#125;) 2.方法 1.test() 正则对象方法，检测测试字符串是否符合该规则，返回true和false12var reg5 = /\\W/;console.log(reg.test(&apos;asdfasdf&apos;)); 3.正则内部类 1.预定义类 . [^\\n\\r] 除了换行和回车之外的任意字符（“”不行） \\d [0-9] 数字字符 只要含有0-9就是true \\D [^0-9] 非数字字符 只要含有非0-9就是true \\s [ \\t\\n\\x0B\\f\\r] 空白字符 \\S [^ \\t\\n\\x0B\\f\\r] 非空白字符 \\w [a-zA-Z_0-9] 单词字符 字母数字下划线（注册要求用户名） 只要含有其中一种类型就是true \\W [^a-zA-Z_0-9] 非单词字符 2.注意: 如果^直接写 是以xx开始的意思 [abc]==&gt; 包括a或b或c中任意一个 如果[^xx]则是对[]中的内容取非 3.用于匹配字符串中是否包含abc的字符 1234567891011121314151617181920212223var reg = /abc/; //必须要同时含有连续的abcconsole.log(reg.test(&apos;abc&apos;)); //trueconsole.log(reg.test(&apos;abcde&apos;)); // trueconsole.log(reg.test(&apos;ab&apos;)); // falseconsole.log(reg.test(&apos;aebc&apos;)); // falsevar reg3 = /[abc]/; //只要含有三个中的其中一个就为trueconsole.log(reg3.test(&apos;aebc&apos;)); // trueconsole.log(reg3.test(&apos;ab&apos;)); // truevar reg4 = /[^abc]/; //只要含有不是abc的任意一个字符console.log(reg4.test(&apos;ab&apos;)); // falseconsole.log(reg4.test(&apos;aebc&apos;)); // true // 第一位字符3-5,第二位字符a-c var reg3 = /[3-5][a-c][1]/; console.log(reg3.test(&apos;23fa&apos;)); //false console.log(reg3.test(&apos;23a1&apos;)); //true // ^ 开始 ; $ 结尾 var reg4 = /^[3-5][a-c][1]$/; console.log(reg4.test(&apos;3b1&apos;)); // true console.log(reg4.test(&apos;c3b1&apos;)); // false 4.量词 1234567891011121314151617181920212223242526272829// * &gt;=0; 重复零次或更多 (&gt;=0) var reg = /[0-9]*/; console.log(reg.test(&apos;abc&apos;)); // true console.log(reg.test(&apos;&apos;)); // true // + &gt;=1; 重复一次或更多次 (&gt;=1) var reg2 = /[0-9]+/; console.log(reg2.test(&apos;abc&apos;)); // false console.log(reg2.test(&apos;abc111&apos;)); // true // ? 0,1 重复零次或一次 （0||1） 要么有 要么没有 var reg3 = /[0-9]?/; console.log(reg3.test(&apos;abc111&apos;)); //true //&#123;&#125;只是就近前面紧挨着的单词的量词//&#123;n&#125; n次 （x=n）//&#123;n,&#125; 重复n次或更多 (x&gt;=n)//&#123;n,m&#125; 重复出现的次数比n多但比m少 (n&lt;=x&lt;=m) var reg4 = /^a&#123;2&#125;$/; console.log(reg4.test(&apos;aaac&apos;)); //false console.log(reg4.test(&apos;aa&apos;)); //true var reg5 = /^a&#123;2,3&#125;c$/; console.log(reg5.test(&apos;aac&apos;)); //true var reg6 = /^a&#123;2,&#125;c$/; console.log(reg6.test(&apos;aaaaaaaaaaac&apos;)); //true 5.replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。 语法格式：(返回值是新字符串)12345678910111213141516 &lt;script&gt; var str1 = &apos;abcdefgabc&apos;; var str2 = &apos;abcdefgabcABc&apos;; // 注意: replace并不能修改原来的值 // replace 只能替换第一次出的值 // 如何实现一个replaceAll的作用 var s1 = str1.replace(&apos;abc&apos;,&apos;123&apos;); // replace可以接收一个正则表达式 // g global 全局匹配 // i ignore 忽略大小写 var reg = /abc/gi; var s2 = str2.replace(reg,&apos;123&apos;); console.log(s1); //123defgabc console.log(s2); //123defg123123&lt;/script&gt; 6.封装自己的trim 函数 1234567891011function trim(str) &#123; return str.replace(/（^\\s+）|（\\s+$）/g,&quot;&quot;); // 去掉前面和后面的空格&#125; // 去掉前面和后面的空格 function trim(str) &#123; // var str = &apos; abc &apos;; // ==&gt; &apos;abc&apos;; return str.replace(/(^\\s+)|(\\s+$)/g,&apos;&apos;); &#125; var str = &apos; abc &apos;; console.log(str); console.log(trim(str)); 7.敏感词替换 1234 var reg = /(钱|刀|杀|死|虎|反人类)/g;var str = &apos;老钱以前用刀杀死了一只老虎,他真是一个反人类的操作!&apos;;var s1 = str.replace(reg,&apos;*&apos;);console.log(s1);","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-02-18T02:33:46.503Z","updated":"2019-02-18T02:33:46.503Z","comments":true,"path":"2019/02/18/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}